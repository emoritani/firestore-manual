= 始めに

「Vue.jsとFirebaseで作るミニWebサービス ~初めてのサーバーレスシングルーページアプリケーション~」（以下、Webサービス作る本）ではFirebaseを利用してユーザー登録やサイトホスティング、またユーザーデータの保存を利用していました。

本の内容でデータ保存には「Realtime Database（以下RTDB）」を利用していましたが、後継として「Firestore」という別なデータベースがあります。
執筆時にはまだβ版で不安定だったため不採用にしたFirestoreですが、最近は動作も安定しており本番環境で採用している企業も増えてきました。個人的には今年の末〜来年の頭までにはβ版が解除されるのではないかと思っています。（本マニュアル執筆:2018年9月）

FirestoreはRealtimeDBに比べてさまざまな機能が追加されており、Webサービス作る本で利用するような通常のデータベースであれば、今後は基本的にFirestoreを使ったほうがよいと考えています。

本マニュアルではRTDBとの違いや、Webサービス作る本においてFirestoreを使った場合の実装への移行について書いていきます。

= RTDBとFirestoreの違いについて

現在Firestoreでは、東京リージョンが選択出来ない（予定はされています）ため、動作で少しタイムラグが発生します。そのため、RTDBはリアルタイムにデータのやりとりを行う場面ではFirestoreよりも優れているため、場面によって使い分けていただければと思います。

== データの保存形式

RTDBでは全体のデータを1つの大きなJSONツリーとして保存します。シンプルなデータは非常に簡単に保存できますが、複雑で階層的なデータを処理する場合は色々と工夫が必要でした。

Firestoreでも保存するデータは概ね、JSONに似ています。
Firestoreはコレクションというデータのまとまりにまとめ、内部データをドキュメントと呼び、コレクションごとに個別でクエリを発行して検索などができるなどがRTDBと大きく違う点です。

データを階層化しても、その階層化のデータをまたサブコレクションとすることで大量のデータも処理しやすくなりました。それによりRTDBのデータを利用する際に必要だった平滑化などのテクニックがなくとも様々な処理をやりやすくなりました。

更にデータに型を定義できたり、リファレンス型という他のコレクションやドキュメントのデータリファレンスを格納することができるようになり、リレーショナルなデータ格納が可能になりました。

== ルール設定の違い

基本的にreadとwriteのみで、varidationでそれを補う形でしたが、update・delete・createなども詳細に設定をすることができるようになったり、自分自身以外のデータを取得して比較するなども比較的楽になりました。

また、ルール内で@<b>{カスタム関数}を定義できるようになり、複雑化するルールのチェックをより簡潔に記述できるようになりました。

//image[cunstomfunction][カスタム関数の例]{
//}

== 料金の違い

RTDBは帯域幅とストレージにのみ課金でしたが、Firestoreはデータベースで実行されているオペレーション（読み取り、書き込み、削除）に課金され、帯域幅とストレージの課金レートは低くなります。
また、Google App Engineと連携させて、１日の限度額を設定できるようにもなりました。

== その他の違い

RTDBでは膨大なデータが保存されている場合にはスケールする際にシャーディングが必要となっていましたが、Firesoterではスケーリングの際にそういった壁はありません。

= RTDBからの移行作業

初版P43 「5.4 Firebase Realtime DBのruleを設定する」をFirestoreで設定する場面から順に進めていきます。

== 初期設定

まずはFirebaseの管理画面から今回のプロジェクトで利用しているプロジェクトを開きます。

左のメニューからDatabeseを選択するとRTDBのデータ画面が表示されると思います。

※もし新規プロジェクトで作成する場合はFirestoreが表示されていると思いますので、データベースの作成を選択してください。

データベースの管理画面の上部にある「Realtime Database」と表示してあるセレクトボックスをクリックすると「Cliud Firestore」がありますので、それを選択します。

//image[selectbox][セレクトボックスをクリックした状態]{
//}

その後セキュリティルールの初期設定をどうするか表示されますが、こちらは後ほど変更するためロックモードのまま次へ進みます。

//image[securityrule][セキュリティルールの選択]{
//}

これでデータベースとして利用するFirestoreのセットアップは完了です。次にRTDBと同じようにルールの設定を行います。

== ルール設定

FirestoreではRTDBでのルール設定と比べて複雑なルールも比較的簡単に記述しやすくなりました。また、RTDBのみであったルール設定の確認のためのシミュレータも2018年6月から実装されたことでルールの検証がしやすくなりました。

公式ドキュメントは次になります。

//quote{
Cloud Firestore セキュリティルールを使ってみる

@<href>{https://firebase.google.com/docs/firestore/security/get-started}
//}

RTDBで設定した場合と同じようにmemosというコレクションを作成し、その中にユーザー毎のドキュメントを作成するという形にしようと思います。

管理画面のルールタブを選択し、ルール設定画面を表示します。RTDBと同じようにmemos配下に認証時のユーザーID(（user_id）と同じドキュメント名配下は自分自身しか読み書き出来ないように設定します。

RTDBでは"auth"に認証情報が格納されていましたが、Firestoreのルール設定では"request.auth"になっているので注意が必要です。

//image[rules][セキュリティルールの設定]{
//}

== ルールシュミレータの実行

Firestoreでもルールシュミレータが実装されたので、試しに利用してみましょう。

ルール管理画面の左の星の辺りにマウスオーバーすると、ルール設定の履歴が閲覧できます。下にあるシミュレータボタンをタップしてみましょう。

//image[simurateBtn][シミュレータの実行]{
//}

シミュレーションタイプではgetやcreate等それぞれテストができます。今回はmemos配下のuser_idのドキュメントが読み込み出来ないかのシミュレーションを試します。

ここで自身の認証ユーザーIDが知りたいので、一度Authenticationタブを開きます。そこでは認証済のユーザーの一覧が見られますので、自分のメールアドレスの「ユーザーUID」をコピーします。

//image[auth][認証情報一覧]{
//}

もう一度ルールシミュレータに戻り「場所」の部分に「memos/コピーしてきたユーザーID」を入力します。認証済みボタンをOFFのまま触らず「実行」ボタンを押してみてください。

「 Error: simulator.rules line [4], column [29]. Null value error.」という表示がされたと思います。これは認証がされていないユーザーがDBの読み込みを行おうとして、認証情報が入っている"request.auth"が空のためエラーになって読み込みに失敗（データが正しく保護されている）しています。

ではルールの設定が出来たので、